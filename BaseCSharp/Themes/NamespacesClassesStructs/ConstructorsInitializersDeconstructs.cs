namespace BaseCSharp.Themes.NamespacesClassesStructs;

public class ConstructorsInitializersDeconstructs
{
    // Перегрузки конструкторов
    class Example
    {
        private string _name;

        private byte _age;

        public string birthday;
        
        // Создание конструкторов
        // явно определенный конструктор - по умолчанию теперь не вызывается
        public Example()
        {
            // Тут можно сделать какие то настройки для экземпляра (инициализация объекта)
            Console.WriteLine("Выполнюсь перед созданием экземпляра");
            Console.WriteLine("при вызове конструктора без параметров - вместо по конструктора умолчанию");
            _name = "Дима"; // например проинициализировать какие то данные
            _age = 28;
        }

        public Example(string name)
        {
            // Вторая перегрузка конструктора - имеет 1 параметр - те другая сигнатура
            Console.WriteLine("При передачи одного строкового параметра вызовется этот конструктор");
            _name = name;
            _age = 28;
        }

        public Example(string name, byte age)
        {
            // Третья перегрузка - имеет 2 параметра
            Console.WriteLine("При передаче строкового и байтового параметров вызовется этот конструктор");
            _name = name;
            _age = age;
        }
        
        // Ключевое слово this - ссылка на экземпляр этого класса
        // через this можно обращаться к любому члену класса
        // Применяется при совпадении полей и параметров, альтернатива писать поля через _ поджопник
        public Example(string name, byte age, string birthday) // параметр и поле назыв одинаково - конфликт
        {
            // чтобы избежать конфликта можно уточнить что это именно поле класса Example указав this
            // имхо лучше через поджопник - меньше путаницы
            this.birthday = birthday; // можно было бы _birthday = birthday
            _name = name; // можно было бы this.name = name
            _age = age; // можно было бы this.age = age
            Console.WriteLine("Перегрузка с датой");
        }
        
        // Цепочка вызовов конструкторов - для того чтобы избежать однотипных действий в конструкторах как это было выше
        // присваивание name и age - в каждом конструкторе - можно сократить
        // например
        public Example(string name, string birthday, byte age) : this(name, age, birthday) // передали в 4 конструктор
        {
            // просто поменяли местами параметры - но уже считается другая перегрузка - другая сигнатура
            Console.WriteLine("Вызовется конструктор с перегрузкой с датой а потом этот");
        }
        
        public Example(byte age, string name = "Дима") : this(name, age) // передали в 3 конструктор
        {
            // просто поменяли местами параметры - но уже считается другая перегрузка - другая сигнатура
            // можно установить параметры по умолчанию
        }

        public void PrintData()
        {
            Console.WriteLine($"{_name}, {_age}");
        }
    }

    // с С#12 - досупны первичные конструкторы (как по умолчанию только с параметрами)
    // Первичные конструкторы - создает поля по переданным параметрам под капотом
    class Example2(string val1, int val2) // первичный конструктор
    {
        public Example2(int val1, string val2) : this(val2, val1) // обязаны вызвать первич конструктор в каждой перегрузке
        {
            Console.WriteLine("Теперь минимальное кол параметров 2 1 инт другой стринг");
            Console.WriteLine("Обязаны вызвать первичный конструктор");
        }
        
        public void Read()
        {
            Console.WriteLine("{0} --- {1}", val1, val2); // доступны во всем классе
        }
    }
    
    // Инициализаторы - можно записать данные в доступные поля и свойства в момент создания
    // Как инициализация в конструкторе, но нельзя вызывать какие то методы и тд только инициализация паблик полей
    class Example3
    {
        public string val1; // можно присвоить значение в инициализаторе при создании экземпляра
        public int val2;

        public Example3()
        {
            val1 = "Биба";
            val2 = -10; // может перезатереться инициализатором тк он выполняется после конструктора
            Console.WriteLine($"Значение в конструкторе {val1} {val2}");
        }

        public void Print()
        {
            Console.WriteLine($"Значение после создания экземпляра {val1} {val2}"); // перезаписались инициализатором
        }
    }
    
    public void Run()
    {
        Console.WriteLine("++++++++ КОНСТРУКТОРЫ ИНИЦИАЛИЗАТОРЫ И ДЕКОНСТРУКТОРЫ ++++++++");
        
        // Конструкторы - выполняют инициализацию объекта, есть один конструктор по умолчанию (скрыт)
        // Если определяем свой конструктор, конструктор по умолчанию не будет вызываться (только явно определенные)

        // Создание конструкторов
        // Вызовется наш определенный конструктор без параметров, а не по умолчанию
        Example obj1 = new Example(); // создание объекта
        obj1.PrintData();
        
        // класс может иметь несколько конструкторов, но должны быть разной сигнатуры (те кол-во параметров)
        Example obj2 = new Example("Дима 2"); // Вызовется второй конструктор с 1 парамером
        Example obj3 = new Example("Дима 3", 31); // Вызовется 3 конструктор с 2 параметрами

        Example obj4 = new("Дима 3"); // сокращенная запись - но не красиво имхо + нельзя через var
        
        var obj5 = new Example("Дима 5", "13.05.1995г", 31); // перегрузка с вызовом по цепочке
        var obj6 = new Example("Дима 5", 25, "13.05.1995г"); // параметры те же но в другом порядке

        //Example2 obj6 = new(); - теперь по умолчанию 2 параметра конструктора
        // теперь минимальное кол-во параметров - 2 и того типа что и в первичном конструкторе
        // тк вызов первичного конструктора обязателен - сомнительно но окэй

        Example2 obj7 = new("123", 123); // - все ок есть 2 параметра для первичного конструктора

        // инициализаторы - выполняются ПОСЛЕ конструкторов - те инициализированное все в конструкторе перезапишется
        Example3 obj8 = new Example3 { val1 = "Дима", val2 = 28 }; // записали данные при создании и без конструктора
        obj8.Print();
    }
}