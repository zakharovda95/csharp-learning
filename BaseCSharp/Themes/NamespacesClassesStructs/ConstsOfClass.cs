namespace BaseCSharp.Themes.NamespacesClassesStructs;

public class ConstsOfClass
{
    
    internal class ExampleClass
    {
        internal const string FIELD_1 = "Это константа"; // должно быть сразу присвоино значение
        internal readonly string Field2; // не обязательно инициализировать сразу (можно либо сразу либо в конструкторе)

        internal ExampleClass()
        {
            Field2 = ""; // присвоили значение в конструкторе в инициализаторе НЕЛЬЗЯ!
        }
    }
    
    internal readonly struct ExampleStruct
    {
        internal readonly int Field1; // проинициализирую в конструкторе
        internal const int FIELD_2 = 123; // можно использовать константы
        internal int Prop1 { get; init; } = 123; // только get или get и init без set
        internal int Prop2 { get; } = 321; // только get или get и init без set

        // Обязательно нужен конструктор если есть непроинициализированые поля
        // тк только при объявлении или в конструкторе и по умолчанию (для свойств) можно проинициализировать
        // в инициализаторе НЕЛЬЗЯ
        public ExampleStruct()
        {
            Field1 = 12; // проинициализировали в конструкторе
            Prop1 = 13; // перезатерли по умолчанию
            Prop2 = 14;
        }
    }
    
    public void Run()
    {
        Console.WriteLine("++++++++ КОНСТАНТЫ КЛАССА READONLY ++++++++");
        
        // Константы класса так же как и статичные поля относятся ко всему классу вцелом
        // Константы должны быть сразу проинициализированы (те на момент компиляции должно быть значение)
        // Образение к константе так же как и в статичном поле через имя класса а не объекта
        // нельзя использовать static тк они уже являются статичными

        var exClass = new ExampleClass() ; // константу не видно
        //exClass.Field2 = ""; - ошибка нельзя переназначить readonly поле
        
        var field = ExampleClass.FIELD_1; // читаем константу обратившись по имени самого класса
        
        // Readonly поля в отличии от констант могут заиметь значение и во время выполнения а не только компиляции
        
        
        // Структуры для чтения - имеют только поля и свойства для чтения те подходят для хранения коллекции неизменяемых данных
        
    }
}