namespace BaseCSharp.Themes.NamespacesClassesStructs;

public class Properties
{
    // Свойства ()аксессоры - удобный способ установки-записи значений в поля класса/структуры
    // В свойстве 2 блока get() - получение и set(value) - установка


    public class ExampleClass
    {
        // поле
        private int _age; // приватное поле - к нему не имеем доступа извне напрямую - это закон!
        // И вообще доступ к полям класса только через свойства! - это сделано для того чтобы контролирвать доступ
        // Например: мы можем проконтролировать через свойство что возраст age не может быть меньше 0
        // Без свойства напрямую мы могли бы установить хоть -150 лет а это бред + контроль доступа и тд

        private string _name;
        private string _lname;
        private bool _isActive = false;
        private decimal _salary;

        internal ExampleClass()
        {
            field7 = 23; // можно проинициализировать через конструктор потом только для чтения
            field6 = 345;
        }
        
        // свойство
        internal int Age
        {
            get { return _age; }
            set
            {
                // провалидировали при установке, но даже если просто установка все равно только через свойство
                if (value < 0) _age = 0;
                else if (value > 120) _age = 120;
                else _age = value;
            }
        }

        // сокращенная запись
        internal string Name
        {
            get => _name;
            set => _name = value; 
        }

        // доступно для чтения но для установки только внутри класса
        internal string LastName
        {
            // сразу на оба блока нельзя ставить модификатор
            get => _lname; // модификаторы работают если есть оба блока get и set иначе нельзя
            private set => _lname = value; // работают модификаторы но только с меньшим ограничением те public - нельзя
        }

        // можно только get или только set если нужно только читать или только устанавливать значения
        internal bool IsActive => _isActive;
        
        // вычисляемые свойства - то же как во вью геттер с какими то вычислениями
        internal string FullName => $"{_name} {_lname}"; // вычислили полное имя
        
        // Автосвойства - сокращенная запись обычных свойств
        // не нужно указывать приватное _поле - оно создасться автоматически по имени автосвойстваж
        // можно развернуть автосвойство в обычное свойство и добавить логики
        // нельзя сделать автосвойство ТОЛЬКО ДЛЯ ЗАПИСИСИ но ТОЛЬКО ДЛЯ ЧТЕНИЯ можно (задать значения по умолчанию и в инициализаторе)
        // автосвойствам можно присвоить значения по умолчанию через инициализатор
        // автосвойства могут иметь модификаторы доступа
        
        internal string field2 { get; set; } // автосвойство - поле под капотом
        internal bool field3 { get; } = true; // только для чтения со значкнием по умолчанию
        internal short field4 { get; private set; } // чтение - запись только внутри класса
        internal double filed5 { private get; set; } // наоборот
        
        // блок init - позволяет проинициализировать свойство, но потом изменить будет нельзя (только для чтения)
        internal int field6 { get; init; } = 123; // проинициализировали - установить другое значение нельзя
        internal int field7 { get; init; } // установим в инициализаторе при создании объекта
        
        // поле required (С# 11) - нужно обязательно проинициализировать ЧЕРЕЗ ИНИЦИАЛИЗАТОР
        // причем не важно есть ли по умолчанию или в конструкторе - все равно ИНИЦИАЛИЗАТОР
        
        public required short field8 { get; set; } // модификатор должен быть доступный
    }
    
    public void Run()
    {
        Console.WriteLine("++++++++ СВОЙСТВА ++++++++");
        ExampleClass obj = new() { field8 = 12 }; // обязательно в инициализаторе инициализация required свойства
        obj.Age = 99; // установили значение в свойство
        Console.WriteLine(obj.Age); // прочитали свойство

        var obj2 = new ExampleClass() { field7 = 321, field8 = 12 }; // проинициализировали автосвойство
        //obj2.field6 = 123; // ошибка - после инициализации свойство только для чтения
        //obj2.field7 = 32; // то же
        Console.WriteLine(obj2.field7); // чтение без проблем
    }
}