namespace BaseCSharp.Themes.NamespacesClassesStructs;

public class Structs
{
    public struct Example; // С C# 12 - как и в классах в структуре без тела можно не ставить скобки
    
    public struct Example2 // определение сруктуры
    {
        private string _name; // так же имеет поля и методы
        public int age = 10; // С#10 возможно инициализация по умолчанию (раньше было нельзя - отличие от классов)
        
        // так же как в классах имеет конструктор по умолчанию
        // так же как в классах можно определять конструкторы с перегрузками
        
        // до C# 10 - нельзя было определить пустой конструктор - тепрь можно
        public Example2() {} // чтобы записались значения по умолчанию нужно явно определить конструктор без параметров
        public Example2(string name)
        {
            Console.WriteLine("Перегрузка с именем");
            _name = name; // до С# 11 при определении структуры должны были инициализировать все его поля
            // теперь не обязательно
        }

        public Example2(string name, int age) : this(name) // так же вызов конструкторов работает
        {
            Console.WriteLine("Вызовется сначала 1 перегрузка конструктора потом эта");
            this.age = age;
        }

        public void Print()
        {
            Console.WriteLine("{0} ---- {1}", _name, age);
        }
    }
    
    public struct Example3(string val1) // первичный конструктор как и в классах (C#12)
    {
        private int _val2;
        public string Field;
        public Example3(int val2, string val3) : this(val3) // так же можно передавать по цепочке конструкторы
        {
            // Так же как и в классах при первичных конструкторах обязаны вызвать его в перегрузке
            Console.WriteLine("Можно вызвать конструктор по умолчанию даже если есть первичный конструктор");
            // те в отличии от класса минимальный набор параметров так же 0 - по умолчанию
            // но если вызовем кастомную перегрузку - обязаны передать параметр для первичного конструктора
            _val2 = val2;
        }

        public void Print()
        {
            Console.WriteLine($"{_val2} ---- {Field}");
        }
    }
    
    public void Run()
    {
        Console.WriteLine("++++++++ СТРУКТУРЫ ++++++++");
        
        // Структуры - еще пользовательский тип (как классы и енамы)
        // Все примитивы int bool char и тд - являются структурами
        
        // создание и обращение к полям и методам как и в классах - разницы нет
        var struct0 = new Example2(); // конструктор по умолчанию установит значения по умолчанию int - 0 string - null
        struct0.age = 29; // установка значений как в классах
        
        var struct1 = new Example2("Дима", 28);
        struct1.Print();

        var struct2 = new Example2(); // нужно внутри определить конструктор без параметров
        struct2.Print();
        
        // если нет значений по умолчанию или не объявлен явно пустой конструктор - вызовется конструктор по умолчанию
        // ДАЖЕ ЕСЛИ ЕСТЬ ПЕРЕГРУЗКИ (В ОТЛИЧИИ ОТ КЛАССОВ)

        Example3 example3 = new();
        example3.Print();

        Example3 example4 = new Example3 { Field = "Поле" }; // инициализаторы как в классах
        
        // Копирование с небольшими изменениями с помощью with
        var example5 = example4 with { Field = "Другое поле" }; // скопировали структуру example4 но переназначили поле Field
        
        // Варианты записи (можно с new а можно без new)
        var examople6 = new Example3(); // как класс
        Example3 example7; // без оператора new как примитив
        example7.Field = "";

        var example8 = examople6 with { Field = "123" };

    }
}